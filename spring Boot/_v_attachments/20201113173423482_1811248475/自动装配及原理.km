{"root":{"data":{"text":"自动装配及原理","expandState":"expand"},"children":[{"data":{"id":"c71zw196qtk0","created":1605256364376,"text":"@SpringBootApplication","layout":null,"expandState":"expand"},"children":[{"data":{"id":"c71zwbgwxq80","created":1605256386611,"text":"@SpringBootConfiguration","layout":null,"expandState":"collapse"},"children":[{"data":{"id":"c71zxb1rvj40","created":1605256464060,"text":"@Configuration","layout":null,"expandState":"expand"},"children":[{"data":{"id":"c71zxhyoqzc0","created":1605256479111,"text":"@Component","layout":null,"expandState":"expand"},"children":[]}]}]},{"data":{"id":"c71zwcrhre00","created":1605256389428,"text":"@EnableAutoConfiguration 自动导入包","layout":null,"expandState":"expand","priority":null,"note":null},"children":[{"data":{"id":"c71zxsrcnvs0","created":1605256502612,"text":"@AutoConfigurationPackage","expandState":"expand","layout":null},"children":[{"data":{"id":"c71zy9mhdc00","created":1605256539323,"text":"@Import(AutoConfigurationPackages.Registrar.class) 自动注册包","layout":null,"expandState":"expand","note":null},"children":[]}]},{"data":{"id":"c71zxvzwwvc0","created":1605256509660,"text":"@Import(AutoConfigurationImportSelector.class) 自动导入包的核心","layout":null,"expandState":"expand","note":null},"children":[{"data":{"id":"c7206mo1sc00","created":1605257194629,"text":"getAutoConfigurationEntry() 获得自动配置的实体","layout":null},"children":[]},{"data":{"id":"c7207mo5m740","created":1605257272999,"text":"getCandidateConfigurations() 获取候选的配置","note":"\n\n获取所有的加载配置\n```\npublic static List<String> loadFactoryNames()\n```\n\t\n\t```\n    loadSpringFactories()\n    ```","layout":null},"children":[{"data":{"id":"c720g2vlt1s0","created":1605257935192,"text":"getSpringFactoriesLoaderFactoryClass()","note":"标注了 EnableAutoConfiguration 注解的类\n```\nprotected Class<?> getSpringFactoriesLoaderFactoryClass() {\n\t\treturn EnableAutoConfiguration.class;\n}\n```","layout":null},"children":[]},{"data":{"id":"c720ij5demo0","created":1605258127339,"text":"public static List loadFactoryNames（）","note":"获取所有的加载配置\n```\nreturn loadSpringFactories(classLoaderToUse).getOrDefault(factoryTypeName, Collections.emptyList());\n```","layout":null},"children":[{"data":{"id":"c720liaz75c0","created":1605258360594,"text":"loadSpringFactories()","layout":null,"note":"系统 项目 资源\n`public static final String FACTORIES_RESOURCE_LOCATION = \"META-INF/spring.factories\";//从这里获取配置文件`\n\n```\nEnumeration<URL> urls = classLoader.getResources(FACTORIES_RESOURCE_LOCATION);\n```\n\n**从这些资源中遍历了所有的nextElement(自动配置)\n遍历完成后\n封装为Properties供我们使用**\n```\nwhile (urls.hasMoreElements()){\n\t...\n}\n```"},"children":[{"data":{"id":"c720v5ba2xk0","created":1605259115956,"text":"会导入所有配置 但是需要导入对应的start才能生效","note":"因为里面有一个核心注解\n`@ConditionalOnXXX`\n如果里面的全部满足(类都加载完成)\n， 才会生效\n\n```\n@Configuration(proxyBeanMethods = false)\n@ConditionalOnClass({ CqlSession.class, CassandraRepository.class })\n@ConditionalOnRepositoryType(store = \"cassandra\", type = RepositoryType.IMPERATIVE)\n@ConditionalOnMissingBean(CassandraRepositoryFactoryBean.class)\n@Import(CassandraRepositoriesRegistrar.class)\npublic class CassandraRepositoriesAutoConfiguration {\n\n}\n\n```"},"children":[]}]}]}]}]}]}]}]},"template":"structure","theme":"fish","version":"1.4.43"}